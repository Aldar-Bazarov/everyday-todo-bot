import TelegramBot, { Message } from 'node-telegram-bot-api'
import { handleGetTasks, handleAddTask, handleDeleteTask, handleStopBot } from './tasks'
import { startScheduler, stopScheduler } from './scheduler'

interface UserState {
  addingTask: boolean
  deletingTask: boolean
}

const userStates: { [key: number]: UserState } = {}

export function startBot(bot: TelegramBot): void {
  let isPolling = true

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  bot.setMyCommands([
    { command: '/start', description: '–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥' }
    // { command: '/stop', description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞' }
  ])

  const taskKeyboard = {
    reply_markup: {
      keyboard: [
        [{ text: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã' }],
        [{ text: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úÖ' }, { text: '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóëÔ∏è' }],
        [{ text: '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî' }, { text: '–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï' }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.onText(/\/start/, (msg: Message) => {
    if (!isPolling) {
      bot.startPolling()
      isPolling = true
    }
    bot.sendMessage(msg.chat.id, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω', taskKeyboard)
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
  bot.on('message', (msg: Message) => {
    const chatId = msg.chat.id

    if (!userStates[chatId]) {
      userStates[chatId] = { addingTask: false, deletingTask: false }
    }

    if (msg.text === '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã') {
      handleGetTasks(bot, chatId, taskKeyboard)
    } else if (msg.text === '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úÖ') {
      userStates[chatId].addingTask = true
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', taskKeyboard)
    } else if (msg.text === '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóëÔ∏è') {
      userStates[chatId].deletingTask = true
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', taskKeyboard)
    } else if (msg.text === '/stop') {
      handleStopBot(bot, chatId, taskKeyboard)
    } else if (msg.text === '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî') {
      startScheduler(bot, taskKeyboard)
    } else if (msg.text === '–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï') {
      stopScheduler()
      bot.sendMessage(chatId, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã', taskKeyboard)
    } else if (userStates[chatId].addingTask) {
      if (msg.text) {
        handleAddTask(bot, chatId, msg.text, taskKeyboard)
        userStates[chatId].addingTask = false
      } else {
        bot.sendMessage(
          chatId,
          '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.',
          taskKeyboard
        )
      }
    } else if (userStates[chatId].deletingTask && msg.text) {
      const taskId = parseInt(msg.text)
      if (!isNaN(taskId)) {
        handleDeleteTask(bot, chatId, taskId, taskKeyboard)
        userStates[chatId].deletingTask = false
      } else {
        bot.sendMessage(
          chatId,
          '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
          taskKeyboard
        )
      }
    }
  })
}
